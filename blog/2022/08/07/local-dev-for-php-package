I am making a php package (To convert a curl command into a php usable script (In php curl, guzzle, or Laravel HTTP). The idea came from Jasons stream when he was trying to use the digital Ocean API docs and they just had Go and Ruby code examples...

So, am working on macos, so no php built in...

I am used to using Docker, so that waas my first thought.

Laravel Sail: I tried to install, but you need php to install it (Its a composer dependancy)...
Then I StackOverflow, and theres a way to fake it first (Winning!), but Sail needs to exist in thr composer.json, which I didnt like, so no...

I looked at the core Docker php box. It was nice. So I make a Dockerfile and install some extensions and it kind of works!
* https://hub.docker.com/_/php
But, I couldnt get Composer installed... So I looked at how Sail installs it and copies it, but it still didnt work...

Then I realised there are other PHP packages that use Github actions! So, I found a tool that can run them locally! https://github.com/nektos/act

I copied the laravel/framework tests workflow and it didnt work...

I eventually ran into the bug, documented deep in their readme file (https://github.com/shivammathur/setup-php/issues/494).

I then realised, I need the vendor directory for autocompleting in my IDE... And act didnt seem to add the vendor dir...

So I gave up XD

...

But I came back! I remembered the Laravel default install doesnt require PHP, because it uses the docker command I had tried already (In line 8 above, faking it https://laravel.build/example-app)!

So, I found the box: laravelsail/php81-composer and I went to work!

It was relatively simple :laugh:

First, install composer dependancies
```
docker run --rm \
    -v "$(pwd)":/opt \
    -w /opt \
    laravelsail/php81-composer:latest \
    bash -c "composer install"
    ```
    
Then, run the tests whenever you want, which was pretty quick (OK I only had 1 basic test, but still):
```
docker run --rm \
    -v "$(pwd)":/opt \
    -w /opt \
    laravelsail/php81-composer:latest \
    bash -c "./vendor/bin/phpunit tests"
```

Perhaps this container is overkill (See https://github.com/laravel/sail/blob/1.x/runtimes/8.1/Dockerfile), as its just 1 package and it installs a lot of extras. But, I like that its an official Laravel container, so hopefully it comes with updates if I use the latest 8.1. Much better than rolling my own, even if it took a few hours to figure out!

Then, I thought, are there PHP package development courses, they must have advice, so as some extra work I found these:

* https://phppackagedevelopment.com/ No info on local dev
* https://laravelpackage.com/02-development-environment.html Assumes you have composer
* https://laravelpackageboilerplate.com/ Assume you have composer. Has a sample Github action on ubuntu latest, then installs PHP versions + composer after.
* https://github.com/spatie/package-skeleton-laravel Same as boilerplate above.

I also asked on the Laravel discord (#servers), but they didnt have any advice. So, for now, I am happy with this setup. Maybe I can reduce the command, or move it into an install bash script.

Also, I found a Laravel doc for making a package: https://laravel.com/docs/9.x/packages with info on getting package descovery, if its a Laravel package!
